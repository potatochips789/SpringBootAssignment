1. 제목과 본문을 빈 행으로 구분합니다.
2. 제목을 50글자 이내로 제한합니다.
3. 제목의 첫 글자는 대문자로 작성합니다.
4. 제목의 끝에는 마침표를 넣지 않습니다.
5. 제목은 명령문으로! 과거형을 사용하지 않습니다.
6. 본문의 각 행은 72글자 내로 제한합니다.
7. 어떻게 보다는 무엇과 왜를 설명합니다.

------ type
    feat : 새로운 기능에 대한 커밋
    fix : build 빌드 관련 파일 수정에 대한 커밋
    build : 빌드 관련 파일 수정에 대한 커밋
    chore : 그 외 자잘한 수정에 대한 커밋
    ci : CI 관련 설정 수정에 대한 커밋
    docs : 문서 수정에 대한 커밋
    style : 코드 스타일 혹은 포맷 등에 관한 커밋
    refactor : 코드 리팩토링에 대한 커밋
    test : 테스트 코드 수정에 대한 커밋

----### 커밋 메시지 구조 ###----
# <타입> : <제목> 의 형식으로 제목을 아래 공백줄에 작성
# 작성자
# 제목은 50자 이내 / 변경사항이 "무엇"인지 명확히 작성 / 끝에 마침표 금지
# 예) FEAT: 로그인 기능 추가

# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)

################
# 본문(구체적인 내용)을 아랫줄에 작성
# 여러 줄의 메시지를 작성할 땐 "-"로 구분 (한 줄은 72자 이내)

################
# 꼬릿말(footer)을 아랫줄에 작성 (현재 커밋과 관련된 이슈 번호 추가 등)
# 예) Close #7

==============================================================================================================================

----### 커밋 메시지 예시 ###----
# chore : GitCommitRule.txt 파일 추가
# 신성균

################
# - GitCommitRule.txt
#  -> 작성자, 타입 위치 변경.

################
# 꼬리말 추가부분.s